image:
  repository: fizzbuzz2/portal-checker
  tag: v1.5.0
  pullPolicy: IfNotPresent
  pullSecrets:
  - name: registry-credentials

replicaCount: 1

domainName: "portal.home.oursain.net"

autoscaling:
  enabled: false

resources:
  limits:
    cpu: 400m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

serviceAccount:
  create: true
  name: portal-checker


application:
  ports:
  - name: http
    containerPort: 5000
    protocol: TCP
  containerName: portal-checker
  command: []
  args: []

service:
  port: 80
  targetPort: 5000
  type: ClusterIP
  portName: http

externalSecrets:
- name: portal
  gcp_secret_id: portal-checker
  extract_key_value: false

cronJobs:
- name: rs-cleaner
  enabled: true
  schedule: "0 */3 * * *" # Runs every 3 hours
  image: bitnami/kubectl:latest
  imagePullPolicy: Always
  command: ["/bin/bash"]
  args:
  - -c
  - "for ns in $(kubectl get ns --no-headers | cut -d ' ' -f1); do   kubectl get rs -n $ns --no-headers | awk '$2==0 {print $1}' |   while read rs; do   kubectl delete rs $rs -n $ns;  done; done"
  restartPolicy: OnFailure
  resources:
    limits:
      cpu: 400m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi


- name: error-pod-cleaner
  enabled: true
  schedule: "*/10 * * * *" # Runs every 10 minutes
  image: bitnami/kubectl:latest
  imagePullPolicy: Always
  command: ["/bin/bash"]
  args:
  - -c
  - for ns in $(kubectl get ns --no-headers | cut -d ' ' -f1); do  kubectl get pods -n $ns --no-headers | grep -E 'Evicted|ErrImagePull' | cut -d ' ' -f1 | while read pod; do  kubectl delete pod $pod -n $ns ; done; done"
  restartPolicy: OnFailure
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi


secrets:
  dotenv: []
  # - name: app-dotenv
  #   path: values/prod/secrets/app.env
  files: []
  # - name: secret-file
  #   path: values/prod/secrets/file
initContainers: []
# - name: init-configmap
#   image: bitnami/kubectl
#   command: ['sh', '-c', 'kubectl create configmap portal-checker -n portal-checker --from-literal=key=value || true']


configMaps:
  files: []
  # - name: portal-checker
  #   path: values/develop/configs/urls.txt

volumeMounts: []
# - name: portal-checker
#   mountPath: /app/url.txt


volumes: []
# - name: portal-checker
#   configMap:
#     name: portal-checker ## from the python code
#     optional: true
