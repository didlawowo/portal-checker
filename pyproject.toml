[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "portal-checker"
version = "2.8.1"
description = "Monitoring tool for Kubernetes ingress and routes"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
dependencies = [
    "aiohappyeyeballs==2.4.4",
    "aiohttp==3.11.11",
    "aiosignal==1.3.2",
    "asgiref==3.8.1",
    "asttokens==3.0.0",
    "attrs==24.3.0",
    "blinker==1.9.0",
    "cachetools==5.5.0",
    "certifi==2024.12.14",
    "charset-normalizer==3.4.1",
    "click==8.1.8",
    "colorama==0.4.6",
    "durationpy==0.9",
    "executing==2.1.0",
    "Flask==3.1.1",
    "frozenlist==1.5.0",
    "google-auth==2.37.0",
    "h11==0.16.0",
    "h2==4.1.0",
    "hpack==4.0.0",
    "Hypercorn==0.17.3",
    "hyperframe==6.0.1",
    "icecream==2.1.4",
    "idna==3.10",
    "iniconfig==2.1.0",
    "itsdangerous==2.2.0",
    "Jinja2==3.1.6",
    "kubernetes==31.0.0",
    "loguru==0.7.3",
    "MarkupSafe==3.0.2",
    "multidict==6.1.0",
    "oauthlib==3.2.2",
    "packaging==24.2",
    "priority==2.0.0",
    "propcache==0.2.1",
    "pyasn1==0.6.1",
    "pyasn1_modules==0.4.1",
    "psutil==6.1.0",
    "Pygments==2.19.1",
    "PyYAML==6.0.2",
    "requests==2.32.4",
    "requests-oauthlib==2.0.0",
    "rsa==4.9",
    "six==1.17.0",
    "urllib3==2.5.0",
    "websocket-client==1.8.0",
    "Werkzeug==3.1.3",
    "wsproto==1.2.0",
    "yarl==1.18.3",
]

[tool.setuptools]
py-modules = ["app"]

[project.optional-dependencies]
dev = [
    "pytest==8.3.5",
    "pytest-asyncio==0.26.0",
    "pytest-cov==6.1.1",
    "coverage==7.8.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    ".venv/*",
    "htmlcov/*",
    "*/site-packages/*",
    "helm/*",
    "config/*",
    "static/*",
    "certs/*",
    "assets/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.uv]
# Configuration spécifique à uv
pip = { resolution = "highest" }